
name: 'microservice-example'

services:
  ############################### Cache (Redis) ###############################
  redis-user-cache:
    container_name: "redis-user-cache"
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    networks:
      - my-network
  redis-gateway-cache:
    container_name: "redis-gateway-cache"
    image: redis:latest
    restart: always
    ports:
      - "6380:6380"
    networks:
      - my-network
  redisinsight:
    ## To connect redis, type container name as host to adding database section
    container_name: redisinsight
    image: redislabs/redisinsight:1.8.3
    restart: always
    ports:
      - '8001:8001'
    volumes:
      - ./../user-service/Users/batuhanayyildiz/data/redisinsight:/db
    networks:
      - my-network

  ############################### Postgresql ###############################
  user-db:
    container_name: "user-db"
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: "kafka_user_db"
    ports:
      - "5434:5432"
    # If postgres is installed your computer, do not use 5432:5432
    # "5434:5432" can be used. Second port should be 5432 to reach postgres in docker
    networks:
      - my-network
  auth-db:
    container_name: "auth-db"
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: "kafka_auth_db"
    ports:
      - "5435:5432"
    # If postgres is installed your computer, do not use 5432:5432
    # "5434:5432" can be used. Second port should be 5432 to reach postgres in docker
    networks:
      - my-network
  ############################### Kafka ###############################
  kafka1:
    container_name: "kafka1"
    hostname: "kafka1"
    image: "bitnami/kafka:latest"
    ports:
      - "9092:9092"

    volumes:
      - "kafka1_data:/bitnami"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093'
      KAFKA_LISTENERS: INSIDE://kafka1:29092,OUTSIDE://0.0.0.0:9092,CONTROLLER://kafka1:9093
      KAFKA_SSL_ENABLED_MECHANISMS: PLAIN
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka1:29092,OUTSIDE://localhost:9092
    networks:
      - my-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: "kafka-ui"
    ports:
      - "9090:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29092

    depends_on:
      - kafka1
    networks:
      - my-network



############################### ELK ###############################

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.3.3
    container_name: elasticsearch
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - elastic-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.3.3
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      - elasticsearch
    networks:
      - elastic-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.3.3
    container_name: logstash
    volumes:
      - ./../user-service/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./../user-service/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elastic-network
    depends_on:
      - elasticsearch

############################### Networks And Volumes ###############################
volumes:
  kafka1_data:
    driver: local
  elasticsearch_data:
    driver: local


networks:
  my-network:
  elastic-network: